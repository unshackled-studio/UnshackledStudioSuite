// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Unshackled.Fitness.Core.Data;

#nullable disable

namespace Unshackled.Fitness.Core.Data.Migrations.PostgreSQL
{
    [DbContext(typeof(PostgreSqlServerDbContext))]
    partial class PostgreSqlServerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:CollationDefinition:case_insensitive_collation", "en-u-ks-primary,en-u-ks-primary,icu,False")
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("Xml")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.ToTable("uf_DataProtectionKeys");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("uf_Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("uf_RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("uf_UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("uf_UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("uf_UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("uf_UserTokens", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ActivityEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ActivityTypeId")
                        .HasColumnType("bigint");

                    b.Property<double?>("AverageCadence")
                        .HasColumnType("double precision");

                    b.Property<int>("AverageCadenceUnit")
                        .HasColumnType("integer");

                    b.Property<int?>("AverageHeartRateBpm")
                        .HasColumnType("integer");

                    b.Property<int?>("AveragePace")
                        .HasColumnType("integer");

                    b.Property<double?>("AveragePower")
                        .HasColumnType("double precision");

                    b.Property<double?>("AverageSpeed")
                        .HasColumnType("double precision");

                    b.Property<double?>("AverageSpeedN")
                        .HasColumnType("double precision");

                    b.Property<int>("AverageSpeedUnit")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateEvent")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTimeOffset>("DateEventUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<double?>("MaximumAltitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("MaximumAltitudeN")
                        .HasColumnType("double precision");

                    b.Property<int>("MaximumAltitudeUnit")
                        .HasColumnType("integer");

                    b.Property<double?>("MaximumCadence")
                        .HasColumnType("double precision");

                    b.Property<int>("MaximumCadenceUnit")
                        .HasColumnType("integer");

                    b.Property<int?>("MaximumHeartRateBpm")
                        .HasColumnType("integer");

                    b.Property<int?>("MaximumPace")
                        .HasColumnType("integer");

                    b.Property<double?>("MaximumPower")
                        .HasColumnType("double precision");

                    b.Property<double?>("MaximumSpeed")
                        .HasColumnType("double precision");

                    b.Property<double?>("MaximumSpeedN")
                        .HasColumnType("double precision");

                    b.Property<int>("MaximumSpeedUnit")
                        .HasColumnType("integer");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<double?>("MinimumAltitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("MinimumAltitudeN")
                        .HasColumnType("double precision");

                    b.Property<int>("MinimumAltitudeUnit")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<double?>("TargetCadence")
                        .HasColumnType("double precision");

                    b.Property<int>("TargetCadenceUnit")
                        .HasColumnType("integer");

                    b.Property<int?>("TargetCalories")
                        .HasColumnType("integer");

                    b.Property<double?>("TargetDistance")
                        .HasColumnType("double precision");

                    b.Property<double?>("TargetDistanceN")
                        .HasColumnType("double precision");

                    b.Property<int>("TargetDistanceUnit")
                        .HasColumnType("integer");

                    b.Property<int?>("TargetHeartRateBpm")
                        .HasColumnType("integer");

                    b.Property<int?>("TargetPace")
                        .HasColumnType("integer");

                    b.Property<double?>("TargetPower")
                        .HasColumnType("double precision");

                    b.Property<int?>("TargetTimeSeconds")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<double?>("TotalAscent")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalAscentN")
                        .HasColumnType("double precision");

                    b.Property<int>("TotalAscentUnit")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalCalories")
                        .HasColumnType("integer");

                    b.Property<double?>("TotalDescent")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalDescentN")
                        .HasColumnType("double precision");

                    b.Property<int>("TotalDescentUnit")
                        .HasColumnType("integer");

                    b.Property<double?>("TotalDistance")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalDistanceN")
                        .HasColumnType("double precision");

                    b.Property<int>("TotalDistanceUnit")
                        .HasColumnType("integer");

                    b.Property<int>("TotalTimeSeconds")
                        .HasColumnType("integer");

                    b.Property<long?>("TrainingSessionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberId", "DateEventUtc");

                    b.ToTable("uf_Activities", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ActivityTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DefaultCadenceUnits")
                        .HasColumnType("integer");

                    b.Property<int>("DefaultDistanceUnits")
                        .HasColumnType("integer");

                    b.Property<int>("DefaultElevationUnits")
                        .HasColumnType("integer");

                    b.Property<int>("DefaultEventType")
                        .HasColumnType("integer");

                    b.Property<int>("DefaultSpeedUnits")
                        .HasColumnType("integer");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberId", "Title");

                    b.ToTable("uf_ActivityTypes", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.CookbookEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.ToTable("uf_Cookbooks", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.CookbookInviteEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CookbookId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CookbookId");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.ToTable("uf_CookbookInvites", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.CookbookMemberEntity", b =>
                {
                    b.Property<long>("CookbookId")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("PermissionLevel")
                        .HasColumnType("integer");

                    b.HasKey("CookbookId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("uf_CookbookMembers", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.CookbookRecipeEntity", b =>
                {
                    b.Property<long>("CookbookId")
                        .HasColumnType("bigint");

                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.HasKey("CookbookId", "RecipeId");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("MemberId");

                    b.HasIndex("RecipeId");

                    b.ToTable("uf_CookbookRecipes", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ExerciseEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DefaultSetMetricType")
                        .HasColumnType("integer");

                    b.Property<int>("DefaultSetType")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrackingSplit")
                        .HasColumnType("boolean");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<string>("Muscles")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberId", "Title", "IsArchived");

                    b.ToTable("uf_Exercises", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.HouseholdEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("ContentUid")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.ToTable("uf_Households", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.HouseholdInviteEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("bigint");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.ToTable("uf_HouseholdInvites", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.HouseholdMemberEntity", b =>
                {
                    b.Property<long>("HouseholdId")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("PermissionLevel")
                        .HasColumnType("integer");

                    b.HasKey("HouseholdId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("uf_HouseholdMembers", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.MealPrepPlanRecipeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DatePlanned")
                        .HasColumnType("date");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("bigint");

                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Scale")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)");

                    b.Property<long?>("SlotId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("SlotId");

                    b.HasIndex("DatePlanned", "SlotId");

                    b.ToTable("uf_MealPrepPlanRecipes", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.MealPrepPlanSlotEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("bigint");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("SortOrder");

                    b.HasIndex("Title");

                    b.ToTable("uf_MealPrepPlanSlots", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.MemberEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AppTheme")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("uf_Members", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.MemberMetaEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("MemberId")
                        .HasMaxLength(450)
                        .HasColumnType("bigint");

                    b.Property<string>("MetaKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("MetaValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("MemberId", "MetaKey")
                        .IsUnique();

                    b.ToTable("uf_MemberMeta", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.MetricDefinitionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HighlightColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOnDashboard")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<long>("ListGroupId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("MaxValue")
                        .HasPrecision(2)
                        .HasColumnType("numeric(2,0)");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("MetricType")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("ListGroupId");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberId", "ListGroupId", "SortOrder");

                    b.ToTable("uf_MetricDefinitions", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.MetricDefinitionGroupEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberId", "SortOrder");

                    b.ToTable("uf_MetricDefinitionGroups", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.MetricEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateRecorded")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<long>("MetricDefinitionId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("RecordedValue")
                        .HasPrecision(15, 3)
                        .HasColumnType("numeric(15,3)");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("MetricDefinitionId");

                    b.HasIndex("MemberId", "MetricDefinitionId", "DateRecorded");

                    b.ToTable("uf_Metrics", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.MetricPresetEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberId", "Title")
                        .IsUnique();

                    b.ToTable("uf_MetricPresets", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ProductBundleEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("HouseholdId", "Title");

                    b.ToTable("uf_ProductBundles", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ProductBundleItemEntity", b =>
                {
                    b.Property<long>("ProductBundleId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("ProductBundleId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("uf_ProductBundleItems", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ProductCategoryEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("Title");

                    b.ToTable("uf_ProductCategories", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ProductEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("AddedSugars")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("AddedSugarsN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("AddedSugarsUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("Biotin")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("BiotinN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("BiotinUnit")
                        .HasColumnType("integer");

                    b.Property<string>("Brand")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<decimal>("Calcium")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("CalciumN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("CalciumUnit")
                        .HasColumnType("integer");

                    b.Property<int>("Calories")
                        .HasColumnType("integer");

                    b.Property<int>("CaloriesFromFat")
                        .HasColumnType("integer");

                    b.Property<decimal>("Chloride")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("ChlorideN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("ChlorideUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("Cholesterol")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("CholesterolN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("CholesterolUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("Choline")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("CholineN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("CholineUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("Chromium")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("ChromiumN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("ChromiumUnit")
                        .HasColumnType("integer");

                    b.Property<Guid>("ContentUid")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Copper")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("CopperN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("CopperUnit")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<decimal>("DietaryFiber")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("DietaryFiberN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("DietaryFiberUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("Folate")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("FolateN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("FolateUnit")
                        .HasColumnType("integer");

                    b.Property<bool>("HasNutritionInfo")
                        .HasColumnType("boolean");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("InsolubleFiber")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("InsolubleFiberN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("InsolubleFiberUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("Iodine")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("IodineN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("IodineUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("Iron")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("IronN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("IronUnit")
                        .HasColumnType("integer");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAutoSkipped")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Magnesium")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("MagnesiumN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("MagnesiumUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("Manganese")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("ManganeseN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("ManganeseUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("Molybdenum")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("MolybdenumN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("MolybdenumUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("MonounsaturatedFat")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("MonounsaturatedFatN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("MonounsaturatedFatUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("Niacin")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("NiacinN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("NiacinUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("PantothenicAcid")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("PantothenicAcidN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("PantothenicAcidUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("Phosphorus")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("PhosphorusN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("PhosphorusUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("PolyunsaturatedFat")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("PolyunsaturatedFatN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("PolyunsaturatedFatUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("Potassium")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("PotassiumN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("PotassiumUnit")
                        .HasColumnType("integer");

                    b.Property<long?>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Protein")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("ProteinN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("ProteinUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("Riboflavin")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("RiboflavinN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("RiboflavinUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("SaturatedFat")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("SaturatedFatN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("SaturatedFatUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("Selenium")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("SeleniumN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("SeleniumUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("ServingSize")
                        .HasPrecision(8, 3)
                        .HasColumnType("numeric(8,3)");

                    b.Property<decimal>("ServingSizeMetric")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("ServingSizeMetricN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("ServingSizeMetricUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("ServingSizeN")
                        .HasPrecision(13, 6)
                        .HasColumnType("numeric(13,6)");

                    b.Property<int>("ServingSizeUnit")
                        .HasColumnType("integer");

                    b.Property<string>("ServingSizeUnitLabel")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<decimal>("ServingsPerContainer")
                        .HasPrecision(8, 3)
                        .HasColumnType("numeric(8,3)");

                    b.Property<decimal>("Sodium")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("SodiumN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("SodiumUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("SolubleFiber")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("SolubleFiberN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("SolubleFiberUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("SugarAlcohols")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("SugarAlcoholsN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("SugarAlcoholsUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("Thiamin")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("ThiaminN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("ThiaminUnit")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<decimal>("TotalCarbohydrates")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("TotalCarbohydratesN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("TotalCarbohydratesUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalFat")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("TotalFatN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("TotalFatUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalSugars")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("TotalSugarsN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("TotalSugarsUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("TransFat")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("TransFatN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("TransFatUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("VitaminA")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("VitaminAN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("VitaminAUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("VitaminB12")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("VitaminB12N")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("VitaminB12Unit")
                        .HasColumnType("integer");

                    b.Property<decimal>("VitaminB6")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("VitaminB6N")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("VitaminB6Unit")
                        .HasColumnType("integer");

                    b.Property<decimal>("VitaminC")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("VitaminCN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("VitaminCUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("VitaminD")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("VitaminDN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("VitaminDUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("VitaminE")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("VitaminEN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("VitaminEUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("VitaminK")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("VitaminKN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("VitaminKUnit")
                        .HasColumnType("integer");

                    b.Property<decimal>("Zinc")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<decimal>("ZincN")
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)");

                    b.Property<int>("ZincUnit")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("HouseholdId", "Title");

                    b.ToTable("uf_Products", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ProductImageEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Container")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("ProductId");

                    b.ToTable("uf_ProductImages", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ProductSubstitutionEntity", b =>
                {
                    b.Property<string>("IngredientKey")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.HasKey("IngredientKey", "ProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("HouseholdId", "IngredientKey");

                    b.ToTable("uf_ProductSubstitutions", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ProgramEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastWorkoutUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateStarted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<int>("LengthWeeks")
                        .HasColumnType("integer");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("NextTemplateIndex")
                        .HasColumnType("integer");

                    b.Property<int>("ProgramType")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberId", "Title");

                    b.ToTable("uf_Programs", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ProgramTemplateEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DayNumber")
                        .HasColumnType("integer");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProgramId")
                        .HasColumnType("bigint");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("integer");

                    b.Property<long>("WorkoutTemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("WorkoutTemplateId");

                    b.HasIndex("ProgramId", "WeekNumber", "DayNumber");

                    b.ToTable("uf_ProgramTemplates", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.RecipeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("ContentUid")
                        .HasColumnType("uuid");

                    b.Property<int>("CookTimeMinutes")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("bigint");

                    b.Property<int>("PrepTimeMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<int>("TotalServings")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("HouseholdId", "Title");

                    b.ToTable("uf_Recipes", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.RecipeImageEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Container")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint");

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("RecipeId");

                    b.ToTable("uf_RecipeImages", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.RecipeIngredientEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(8, 3)
                        .HasColumnType("numeric(8,3)");

                    b.Property<string>("AmountLabel")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<decimal>("AmountN")
                        .HasPrecision(15, 3)
                        .HasColumnType("numeric(15,3)");

                    b.Property<string>("AmountText")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<int>("AmountUnit")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("bigint");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<long>("ListGroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("PrepNote")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("ListGroupId");

                    b.HasIndex("HouseholdId", "Key");

                    b.HasIndex("RecipeId", "SortOrder");

                    b.ToTable("uf_RecipeIngredients", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.RecipeIngredientGroupEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("bigint");

                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("RecipeId", "SortOrder");

                    b.ToTable("uf_RecipeIngredientGroups", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.RecipeNoteEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("RecipeId", "SortOrder");

                    b.ToTable("uf_RecipeNotes", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.RecipeStepEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("bigint");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("RecipeId", "SortOrder");

                    b.ToTable("uf_RecipeSteps", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.RecipeTagEntity", b =>
                {
                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint");

                    b.HasKey("RecipeId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("uf_RecipeTags", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ShoppingListEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("StoreId");

                    b.HasIndex("HouseholdId", "Title");

                    b.ToTable("uf_ShoppingLists", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ShoppingListItemEntity", b =>
                {
                    b.Property<long>("ShoppingListId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsInCart")
                        .HasColumnType("boolean");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("ShoppingListId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("uf_ShoppingListItems", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ShoppingListRecipeItemEntity", b =>
                {
                    b.Property<long>("ShoppingListId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint");

                    b.Property<int>("InstanceId")
                        .HasColumnType("integer");

                    b.Property<decimal>("IngredientAmount")
                        .HasPrecision(8, 3)
                        .HasColumnType("numeric(8,3)");

                    b.Property<string>("IngredientAmountUnitLabel")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<int>("IngredientAmountUnitType")
                        .HasColumnType("integer");

                    b.Property<string>("IngredientKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<bool>("IsUnitMismatch")
                        .HasColumnType("boolean");

                    b.Property<decimal>("PortionUsed")
                        .HasPrecision(15, 10)
                        .HasColumnType("numeric(15,10)");

                    b.Property<int>("ServingSizeUnitType")
                        .HasColumnType("integer");

                    b.HasKey("ShoppingListId", "ProductId", "RecipeId", "InstanceId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RecipeId");

                    b.ToTable("uf_ShoppingListRecipeItems", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.StoreEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("HouseholdId", "Title");

                    b.ToTable("uf_Stores", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.StoreLocationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("bigint");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("StoreId");

                    b.HasIndex("HouseholdId", "StoreId", "SortOrder");

                    b.ToTable("uf_StoreLocations", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.StoreProductLocationEntity", b =>
                {
                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<long>("StoreLocationId")
                        .HasColumnType("bigint");

                    b.HasKey("StoreId", "ProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreLocationId");

                    b.HasIndex("StoreId", "StoreLocationId", "SortOrder");

                    b.ToTable("uf_StoreProductLocations", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.TagEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("bigint");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("Title");

                    b.HasIndex("HouseholdId", "Key")
                        .IsUnique();

                    b.ToTable("uf_Tags", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.TrainingPlanEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastActivityUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateStarted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<int>("LengthWeeks")
                        .HasColumnType("integer");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("NextSessionIndex")
                        .HasColumnType("integer");

                    b.Property<int>("ProgramType")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberId", "DateStarted");

                    b.HasIndex("MemberId", "Title");

                    b.ToTable("uf_TrainingPlans", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.TrainingPlanSessionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DayNumber")
                        .HasColumnType("integer");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<long>("TrainingPlanId")
                        .HasColumnType("bigint");

                    b.Property<long>("TrainingSessionId")
                        .HasColumnType("bigint");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("TrainingPlanId");

                    b.HasIndex("TrainingSessionId");

                    b.HasIndex("MemberId", "TrainingPlanId", "WeekNumber", "DayNumber", "SortOrder");

                    b.ToTable("uf_TrainingPlanSessions", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.TrainingSessionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ActivityTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<double?>("TargetCadence")
                        .HasColumnType("double precision");

                    b.Property<int>("TargetCadenceUnit")
                        .HasColumnType("integer");

                    b.Property<int?>("TargetCalories")
                        .HasColumnType("integer");

                    b.Property<double?>("TargetDistance")
                        .HasColumnType("double precision");

                    b.Property<double?>("TargetDistanceN")
                        .HasColumnType("double precision");

                    b.Property<int>("TargetDistanceUnit")
                        .HasColumnType("integer");

                    b.Property<int?>("TargetHeartRateBpm")
                        .HasColumnType("integer");

                    b.Property<int?>("TargetPace")
                        .HasColumnType("integer");

                    b.Property<double?>("TargetPower")
                        .HasColumnType("double precision");

                    b.Property<int?>("TargetTimeSeconds")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberId", "Title");

                    b.HasIndex("MemberId", "ActivityTypeId", "Title");

                    b.ToTable("uf_TrainingSessions", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("uf_Users", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTimeOffset?>("DateCompletedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateStarted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTimeOffset?>("DateStartedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExerciseCount")
                        .HasColumnType("integer");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<string>("MusclesTargeted")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("RecordSecondsAtWeightCount")
                        .HasColumnType("integer");

                    b.Property<int>("RecordSecondsCount")
                        .HasColumnType("integer");

                    b.Property<int>("RecordTargetVolumeCount")
                        .HasColumnType("integer");

                    b.Property<int>("RecordTargetWeightCount")
                        .HasColumnType("integer");

                    b.Property<int>("RecordVolumeCount")
                        .HasColumnType("integer");

                    b.Property<int>("RecordWeightCount")
                        .HasColumnType("integer");

                    b.Property<int>("RepCount")
                        .HasColumnType("integer");

                    b.Property<int>("SetCount")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.Property<decimal>("VolumeKg")
                        .HasPrecision(12, 3)
                        .HasColumnType("numeric(12,3)");

                    b.Property<decimal>("VolumeLb")
                        .HasPrecision(12, 3)
                        .HasColumnType("numeric(12,3)");

                    b.Property<long?>("WorkoutTemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberId", "DateStartedUtc");

                    b.ToTable("uf_Workouts", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutSetEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateRecorded")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTimeOffset?>("DateRecordedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ExerciseId")
                        .HasColumnType("bigint");

                    b.Property<int>("IntensityTarget")
                        .HasColumnType("integer");

                    b.Property<bool>("IsBestSetBySeconds")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBestSetByVolume")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBestSetByWeight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRecordSeconds")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRecordSecondsAtWeight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRecordTargetVolume")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRecordTargetWeight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRecordVolume")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRecordWeight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrackingSplit")
                        .HasColumnType("boolean");

                    b.Property<long>("ListGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<int>("RepMode")
                        .HasColumnType("integer");

                    b.Property<int>("Reps")
                        .HasColumnType("integer");

                    b.Property<int>("RepsLeft")
                        .HasColumnType("integer");

                    b.Property<int>("RepsRight")
                        .HasColumnType("integer");

                    b.Property<int>("RepsTarget")
                        .HasColumnType("integer");

                    b.Property<int>("Seconds")
                        .HasColumnType("integer");

                    b.Property<int>("SecondsLeft")
                        .HasColumnType("integer");

                    b.Property<int>("SecondsRight")
                        .HasColumnType("integer");

                    b.Property<int>("SecondsTarget")
                        .HasColumnType("integer");

                    b.Property<int>("SetMetricType")
                        .HasColumnType("integer");

                    b.Property<int>("SetType")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<decimal>("VolumeKg")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)");

                    b.Property<decimal>("VolumeLb")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)");

                    b.Property<decimal>("WeightKg")
                        .HasPrecision(7, 3)
                        .HasColumnType("numeric(7,3)");

                    b.Property<decimal>("WeightLb")
                        .HasPrecision(7, 3)
                        .HasColumnType("numeric(7,3)");

                    b.Property<long>("WorkoutId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("ListGroupId");

                    b.HasIndex("MemberId");

                    b.HasIndex("WorkoutId", "SortOrder");

                    b.ToTable("uf_WorkoutSets", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutSetGroupEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<long>("WorkoutId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("WorkoutId", "SortOrder");

                    b.ToTable("uf_WorkoutSetGroups", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutTaskEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long>("WorkoutId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("WorkoutId", "Type", "SortOrder");

                    b.ToTable("uf_WorkoutTasks", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<int>("ExerciseCount")
                        .HasColumnType("integer");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<string>("MusclesTargeted")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<int>("SetCount")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberId", "Title");

                    b.ToTable("uf_WorkoutTemplates", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateSetEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ExerciseId")
                        .HasColumnType("bigint");

                    b.Property<int>("IntensityTarget")
                        .HasColumnType("integer");

                    b.Property<long>("ListGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("RepMode")
                        .HasColumnType("integer");

                    b.Property<int>("RepsTarget")
                        .HasColumnType("integer");

                    b.Property<int>("SecondsTarget")
                        .HasColumnType("integer");

                    b.Property<int>("SetMetricType")
                        .HasColumnType("integer");

                    b.Property<int>("SetType")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<long>("WorkoutTemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("ListGroupId");

                    b.HasIndex("MemberId");

                    b.HasIndex("WorkoutTemplateId", "SortOrder");

                    b.ToTable("uf_WorkoutTemplateSets", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateSetGroupEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<long>("WorkoutTemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("WorkoutTemplateId", "SortOrder");

                    b.ToTable("uf_WorkoutTemplateSetGroups", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateTaskEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateCreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long>("WorkoutTemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("WorkoutTemplateId", "Type", "SortOrder");

                    b.ToTable("uf_WorkoutTemplateTasks", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ActivityEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.ActivityTypeEntity", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ActivityType");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ActivityTypeEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.CookbookEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.CookbookInviteEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.CookbookEntity", "Cookbook")
                        .WithMany("Invites")
                        .HasForeignKey("CookbookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cookbook");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.CookbookMemberEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.CookbookEntity", "Cookbook")
                        .WithMany("Memberships")
                        .HasForeignKey("CookbookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cookbook");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.CookbookRecipeEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.CookbookEntity", "Cookbook")
                        .WithMany()
                        .HasForeignKey("CookbookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.RecipeEntity", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cookbook");

                    b.Navigation("Household");

                    b.Navigation("Member");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ExerciseEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.HouseholdEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.HouseholdInviteEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany("Invites")
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.HouseholdMemberEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany("Memberships")
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.MealPrepPlanRecipeEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.RecipeEntity", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MealPrepPlanSlotEntity", "Slot")
                        .WithMany()
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Household");

                    b.Navigation("Recipe");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.MealPrepPlanSlotEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.MemberMetaEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.MetricDefinitionEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MetricDefinitionGroupEntity", "ListGroup")
                        .WithMany("Definitions")
                        .HasForeignKey("ListGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ListGroup");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.MetricDefinitionGroupEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.MetricEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MetricDefinitionEntity", "MetricDefinition")
                        .WithMany()
                        .HasForeignKey("MetricDefinitionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("MetricDefinition");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.MetricPresetEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ProductBundleEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ProductBundleItemEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.ProductBundleEntity", "ProductBundle")
                        .WithMany("Products")
                        .HasForeignKey("ProductBundleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductBundle");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ProductCategoryEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ProductEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.ProductCategoryEntity", "Category")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Category");

                    b.Navigation("Household");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ProductImageEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.ProductEntity", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ProductSubstitutionEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ProgramEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ProgramTemplateEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.ProgramEntity", "Program")
                        .WithMany("Templates")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateEntity", "WorkoutTemplate")
                        .WithMany()
                        .HasForeignKey("WorkoutTemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Program");

                    b.Navigation("WorkoutTemplate");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.RecipeEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.RecipeImageEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.RecipeEntity", "Recipe")
                        .WithMany("Images")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.RecipeIngredientEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.RecipeIngredientGroupEntity", "ListGroup")
                        .WithMany("Ingredients")
                        .HasForeignKey("ListGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.RecipeEntity", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");

                    b.Navigation("ListGroup");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.RecipeIngredientGroupEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.RecipeEntity", "Recipe")
                        .WithMany("Groups")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.RecipeNoteEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.RecipeEntity", "Recipe")
                        .WithMany("Notes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.RecipeStepEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.RecipeEntity", "Recipe")
                        .WithMany("Steps")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.RecipeTagEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.RecipeEntity", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.TagEntity", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ShoppingListEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.StoreEntity", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Household");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ShoppingListItemEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.ShoppingListEntity", "ShoppingList")
                        .WithMany("Items")
                        .HasForeignKey("ShoppingListId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingList");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ShoppingListRecipeItemEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.RecipeEntity", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.ShoppingListEntity", "ShoppingList")
                        .WithMany("RecipeItems")
                        .HasForeignKey("ShoppingListId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Recipe");

                    b.Navigation("ShoppingList");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.StoreEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.StoreLocationEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.StoreEntity", "Store")
                        .WithMany("Locations")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.StoreProductLocationEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.StoreEntity", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.StoreLocationEntity", "StoreLocation")
                        .WithMany()
                        .HasForeignKey("StoreLocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");

                    b.Navigation("StoreLocation");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.TagEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.TrainingPlanEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.TrainingPlanSessionEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.TrainingPlanEntity", "Plan")
                        .WithMany("PlanSessions")
                        .HasForeignKey("TrainingPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.TrainingSessionEntity", "Session")
                        .WithMany()
                        .HasForeignKey("TrainingSessionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Plan");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.TrainingSessionEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.ActivityTypeEntity", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ActivityType");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutSetEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.ExerciseEntity", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.WorkoutSetGroupEntity", "ListGroup")
                        .WithMany("Sets")
                        .HasForeignKey("ListGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.WorkoutEntity", "Workout")
                        .WithMany("Sets")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("ListGroup");

                    b.Navigation("Member");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutSetGroupEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.WorkoutEntity", "Workout")
                        .WithMany("Groups")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutTaskEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.WorkoutEntity", "Workout")
                        .WithMany("Tasks")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateSetEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.ExerciseEntity", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateSetGroupEntity", "ListGroup")
                        .WithMany("Sets")
                        .HasForeignKey("ListGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateEntity", "WorkoutTemplate")
                        .WithMany("Sets")
                        .HasForeignKey("WorkoutTemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("ListGroup");

                    b.Navigation("Member");

                    b.Navigation("WorkoutTemplate");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateSetGroupEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateEntity", "WorkoutTemplate")
                        .WithMany("Groups")
                        .HasForeignKey("WorkoutTemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("WorkoutTemplate");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateTaskEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateEntity", "WorkoutTemplate")
                        .WithMany("Tasks")
                        .HasForeignKey("WorkoutTemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("WorkoutTemplate");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.CookbookEntity", b =>
                {
                    b.Navigation("Invites");

                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.HouseholdEntity", b =>
                {
                    b.Navigation("Invites");

                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.MetricDefinitionGroupEntity", b =>
                {
                    b.Navigation("Definitions");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ProductBundleEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ProductCategoryEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ProductEntity", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ProgramEntity", b =>
                {
                    b.Navigation("Templates");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.RecipeEntity", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Images");

                    b.Navigation("Ingredients");

                    b.Navigation("Notes");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.RecipeIngredientGroupEntity", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ShoppingListEntity", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("RecipeItems");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.StoreEntity", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.TrainingPlanEntity", b =>
                {
                    b.Navigation("PlanSessions");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutEntity", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Sets");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutSetGroupEntity", b =>
                {
                    b.Navigation("Sets");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateEntity", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Sets");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateSetGroupEntity", b =>
                {
                    b.Navigation("Sets");
                });
#pragma warning restore 612, 618
        }
    }
}
