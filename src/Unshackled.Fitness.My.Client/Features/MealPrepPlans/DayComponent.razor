@inherits DayComponentBase

<MudPaper Outlined="true" Class="no-background pa-4 h-100">
	<div class="d-flex flex-column h-100">
		<div class="@(Meals.Count > 1 ? $"d-flex flex-row gap-2 align-center mb-4" : "d-flex flex-row gap-2 align-center")">
			<MudText Typo="Typo.body2" Color="Color.Secondary" Class="flex-grow-1">@((DayOfWeek)Model.DayOfWeek) (@Model.Date.ToString("MM/dd"))</MudText>
			@if (!IsEditMode && Meals.Count == 1 && Model.Recipes.Count > 0)
			{
				<MudButton StartIcon="@Icons.Material.Filled.LocalDining" Size="Size.Small" IconSize="Size.Small" OnClick="@(() => HandleMakeItClicked(Model.Recipes))">Make It</MudButton>
			}
			<div>
				<MudCheckBox T="bool" Dense="true" Color="Color.Secondary" UncheckedColor="Color.Default" Size="Size.Small" Disabled="@IsEditMode"
							 Value="Model.IsChecked" ValueChanged="@HandleItemChecked"></MudCheckBox>
			</div>
		</div>
		<div class="meal-plan">
			@if (IsLoading)
			{
				<MudSkeleton Height="40px" />
				<MudSkeleton Height="40px" />
				<MudSkeleton Height="40px" />
			}
			else
			{
				@if (IsEditMode)
				{
					<MudToolBar Dense="true" Gutters="false" Class="mb-2">
						@if (!IsMoving && !IsSwitching)
						{
							<MudButton StartIcon="@Icons.Material.Filled.AddCircle" Disabled="@DisableComponentControls" OnClick="@(() => HandleAddRecipeClicked())">Add</MudButton>
							@if (Meals.Count > 1)
							{
								<MudButton StartIcon="@Icons.Material.Outlined.SwapVerticalCircle" Disabled="@DisableComponentControls" OnClick="@(() => HandleMoveClicked())">Move</MudButton>
							}
							@if (Model.Recipes.Count > 0)
							{
								<MudButton StartIcon="@Icons.Material.Outlined.SwapHorizontalCircle" Disabled="@DisableComponentControls" OnClick="@(() => HandleSwitchClicked())">Switch</MudButton>
							}
						}
						else
						{
							@if (IsMoving)
							{
								<MudButton StartIcon="@Icons.Material.Filled.Check" OnClick="@(() => HandleApplySortClicked())">Apply</MudButton>
							}
							<MudButton StartIcon="@Icons.Material.Filled.Cancel" OnClick="@(() => HandleCancelMoveOrSwitchClicked())">Cancel</MudButton>
						}
						<MudSpacer />
					</MudToolBar>
				}
				foreach (var mealDef in Meals)
				{
					<div class="meal-definition">
						@if (!IsMoving)
						{
							var recipes = ListRecipes(mealDef);
							@if (!string.IsNullOrEmpty(mealDef.Sid) || recipes.Count > 0)
							{
								@if (!string.IsNullOrEmpty(mealDef.Title))
								{
									<MudPaper Class="d-flex flex-row gap-2 align-center mb-2 px-4 py-2">
										<MudText Typo="Typo.body1" Class="flex-grow-1">@mealDef.Title</MudText>
										@if (!IsEditMode && recipes.Count > 0)
										{
											<MudButton StartIcon="@Icons.Material.Filled.LocalDining" Size="Size.Small" IconSize="Size.Small"
													   OnClick="@(() => HandleMakeItClicked(recipes))">Make It</MudButton>
										}
									</MudPaper>
								}
								@if (recipes.Count > 0)
								{
									@foreach (var recipe in recipes)
									{
										<div class="recipe d-flex flex-row align-center">
											@if (IsEditMode)
											{
												if (IsSwitching)
												{
													<MudIconButton Icon="@Icons.Material.Outlined.ArrowCircleLeft" Disabled="@(Model.DayOfWeek == 0)" OnClick="@(() => HandleSwitchPrev(recipe))" />
													<MudIconButton Icon="@Icons.Material.Outlined.ArrowCircleRight" Disabled="@(Model.DayOfWeek == (int)DayOfWeek.Saturday)" OnClick="@(() => HandleSwitchNext(recipe))" />
												}
												else
												{
													<MudIconButton Icon="@Icons.Material.Filled.Delete" Disabled="@DisableComponentControls" OnClick="@(() => HandleDeleteClicked(recipe))" />
												}
											}
											else
											{
												<MultipleImageComponent BaseUrl="@State.Config.ContentBaseUrl" Class="image-thumbnail-80" Images="@recipe.Images"
																		GalleryTitle="Featured Image" AspectRatio="AspectRatios.R16x9" />
											}
											<div class="flex-grow-1 ps-3">
												<MudLink Typo="Typo.body2" Class="d-block" Href="@($"/recipes/{recipe.RecipeSid}")">@recipe.RecipeTitle</MudLink>
												<MudText Typo="Typo.body2" Color="Color.Tertiary">Scale: @recipe.Scale.ToFractionString()x</MudText>
											</div>
										</div>
									}

								}
								else
								{
									<MudText Typo="Typo.body2" Color="Color.Tertiary" Class="ms-4">No meals.</MudText>
								}
							}
						}
						else
						{
							var recipes = ListSortRecipes(mealDef);
							@if (!string.IsNullOrEmpty(mealDef.Sid) || recipes.Count > 0)
							{
								@if (!string.IsNullOrEmpty(mealDef.Title))
								{
									<MudPaper Class="mb-2 px-4 py-2">
										<MudText Typo="Typo.body1">@mealDef.Title</MudText>
									</MudPaper>
								}
								@if (recipes.Count > 0)
								{
									@foreach (var recipe in recipes)
									{
										<div class="recipe d-flex flex-row align-center">
											<MudIconButton Icon="@Icons.Material.Outlined.ArrowCircleUp" Disabled="@(mealDef.SortOrder == 0)" OnClick="@(() => HandleMoveUp(recipe, mealDef))" />
											<MudIconButton Icon="@Icons.Material.Outlined.ArrowCircleDown" Disabled="@IsDownDisabled(mealDef)" OnClick="@(() => HandleMoveDown(recipe, mealDef))" />
											<div class="flex-grow-1 ms-2">
												<MudLink Typo="Typo.body2" Class="d-block" Href="@($"/recipes/{recipe.RecipeSid}")">@recipe.RecipeTitle</MudLink>
												<MudText Typo="Typo.body2" Color="Color.Tertiary">Scale: @recipe.Scale.ToFractionString()x</MudText>
											</div>
										</div>
									}
								}
								else
								{
									<MudText Typo="Typo.body2" Color="Color.Tertiary" Class="ms-4">No meals.</MudText>
								}
							}
						}
					</div>
				}
			}
		</div>
	</div>
</MudPaper>