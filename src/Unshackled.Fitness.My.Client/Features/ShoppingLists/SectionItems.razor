@inherits SectionItemsBase

<div Class="mb-6">
	<MudToolBar Gutters="false" Class="mb-4">
		<MudToggleIconButton Icon="@Icons.Material.Filled.VisibilityOff" ToggledIcon="@Icons.Material.Filled.VisibilityOff" Color="Color.Default" ToggledColor="Color.Secondary"
		Disabled="@DisableControls" title="Toggle Cart Visibility" Size="Size.Small" ToggledSize="Size.Small" @bind-Toggled="@HideInCart" />

		@if (CanEdit)
		{
			<MudMenu Label="Add" StartIcon="@Icons.Material.Filled.AddCircle" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
				<MudMenuItem OnClick="@(() => HandleAddProductClicked())">Products</MudMenuItem>
				<MudMenuItem OnClick="@(() => HandleAddBundleClicked())">Product Bundle</MudMenuItem>
				<MudMenuItem OnClick="@(() => HandleAddRecipeClicked())">Recipe</MudMenuItem>
			</MudMenu>
			@if (Items.Any())
			{

				<MudMenu Label="Actions" StartIcon="@Icons.Material.Filled.MiscellaneousServices" Disabled="DisableControls" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
					<MudMenuItem OnClick="@(() => HandleResetList())">Reset List</MudMenuItem>
					<MudMenuItem OnClick="@(() => HandleClearList())">Clear List</MudMenuItem>
				</MudMenu>
			}
		}
	</MudToolBar>

	<GroupedList TGroup="ListGroupModel" TItem="FormListItemModel" Groups="@ListGroups" Items="@GroupedItems" IsLoading="@IsLoading" ShowSingleGroupTitle="true" UseDividers="false">
		<GroupRenderer>
			@if (IsGroupItemVisible(context.Sid))
			{
				<div class="d-flex gap-2 align-center mt-4 mb-2 flex-row">
					<MudText Typo="Typo.body1" Class="flex-grow-1">
						@context.Title
					</MudText>
					@if (CanEdit && context.Sid != Globals.UncategorizedKey)
					{
						<div>
							<MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Sort" Href="@($"/stores/{ShoppingList.StoreSid}/aisles/{context.Sid}?list={ShoppingList.Sid}")">
								Sort
							</MudButton>
						</div>
					}
				</div>
			}
		</GroupRenderer>
		<ItemRenderer>
			@if(!HideInCart || !context.Item.IsInCart)
			{
				<MudDivider DividerType="DividerType.FullWidth" Class="my-2" />
				<div class="d-flex gap-2 flex-row align-center">
					<div class="px-3">
						<CaptionedProperty Align="Align.Center" Title="Qty">
							<MudText Typo="Typo.h5">@context.Item.Quantity.ToString()</MudText>
						</CaptionedProperty>
					</div>
					<MultipleImageComponent BaseUrl="@State.Config.ContentBaseUrl" Class="image-thumbnail" Images="@context.Item.Images" GalleryTitle="Product Images" AspectRatio="AspectRatios.R1x1" />
					<div class="flex-grow-1">
						@if (!string.IsNullOrEmpty(context.Item.Brand))
						{
							<MudText Typo="Typo.body2" Class="@IsInCartCss(context.Item)">@context.Item.Brand</MudText>
						}
						<MudLink Typo="Typo.body1" Class="@IsInCartCss(context.Item,"d-block")" Color="Color.Primary" OnClick="@(() => HandleToggleIsInCart(context.Item))">
							@context.Item.Title
						</MudLink>
						@if (!string.IsNullOrEmpty(context.Item.Description))
						{
							<MudText Typo="Typo.caption" Class="@IsInCartCss(context.Item,"d-block")" Color="Color.Tertiary">@context.Item.Description</MudText>
						}
					</div>
					@if (CanEdit)
					{
						<div>
							<MudIconButton Icon="@Icons.Material.Filled.ChevronRight" title="Manage Item" OnClick="@(() => HandleManageItemClicked(context.Item))" />
						</div>
					}
				</div>
				@if (IsLastInGroup(context.Item))
				{
					<MudDivider DividerType="DividerType.FullWidth" Class="my-2" />
				}
			}
		</ItemRenderer>
		<EmptyListRenderer>
			<MudAlert Elevation="0" NoIcon="true" ContentAlignment="HorizontalAlignment.Center" Class="mt-4">The list is empty.</MudAlert>
		</EmptyListRenderer>
	</GroupedList>

	@if (CanEdit && IsEndOfList())
	{
		<MudToolBar>
			<MudSpacer />
			<MudButton StartIcon="@Icons.Material.Filled.Undo" Variant="Variant.Filled" Color="Color.Secondary" Disabled="@DisableControls"
					   OnClick="@(() => HandleResetList())">Reset List</MudButton>
			<MudButton StartIcon="@Icons.Material.Filled.ClearAll" Variant="Variant.Filled" Color="Color.Secondary" Disabled="@DisableControls" 
					   OnClick="@(() => HandleClearList())">Clear List</MudButton>
			<MudSpacer />
		</MudToolBar>

	}
</div>

<SideDrawer Title="@GetDrawerTitle()" Open="@DrawerOpen" OpenChanged="@(() => HandleCancelClicked())">
	@if (DrawerView == Views.AddBundle)
	{
		<DrawerAddBundle OnProductBundleAdded="@HandleProductBundleAdded" />
	}
	else if (DrawerView == Views.AddProducts)
	{
		<DrawerAddProducts ShoppingListSid="@ShoppingList.Sid" SearchOnOpen="@DrawerOpen" OnAddQuickClicked="@(() => HandleAddQuickClicked())"
						   OnProductsAdded="@HandleProductsAdded" OnCanceled="@(() => HandleCancelClicked())" />
	}
	else if (DrawerView == Views.AddRecipe)
	{
		<DrawerAddRecipe ShoppingList="@ShoppingList" OnAddedComplete="@HandleRecipeAdded" OnCancelClicked="@HandleCancelClicked" />
	}
	else if (DrawerView == Views.ManageItem)
	{
		<DrawerManageItem Item="@EditingModel" HasStore="@ShoppingList.HasStore" OnCanceled="@(() => HandleCancelClicked())" 
						  OnSubmitted="@HandleSaveQuantityClicked" OnDeleted="@HandleDeleteClicked" OnLocationChange="HandleChangeLocationClicked" />
	}
	else if (DrawerView == Views.ChangeLocation)
	{
		<DrawerLocations StoreLocations="@StoreLocations" StoreLocationSid="@EditingModel.StoreLocationSid" OnCanceled="@(() => HandleCancelClicked())" OnSubmitted="@HandleSaveLocationClicked" />
	}
	else if (DrawerView == Views.QuickProduct)
	{
		<DrawerQuickProduct OnCanceled="@(() => HandleCancelClicked())" OnSubmitted="@HandleSaveQuickProductClicked" />
	}
</SideDrawer>