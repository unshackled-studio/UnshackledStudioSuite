@using MediatR
@using Unshackled.Fitness.Core.Configuration
@using Unshackled.Fitness.My.Client.Extensions
@using Unshackled.Fitness.My.Client.Services
@inherits LayoutComponentBase

@inject ISnackbar Snackbar
@inject IMediator Mediator
@inject IDialogService DialogService
@inject IScreenWakeLockService ScreenLockService
@inject AppState State
@inject ILocalStorage LocalStorage

<AuthorizeView>
	<Authorized>
		<AppFrame CustomTheme="@CustomTheme" IsLoading="@IsLoading" 
		IntializationCompleted="@HandleInitializationCompleted" ThemeSwitched="@HandleThemeSwitched">
			<AppBarContent>
				<LogoLayout Layout="LogoLayouts.NoIcon" Href="/" Height="32px" />
			</AppBarContent>
			<BodyContent>
				@Body
			</BodyContent>
			<NavTopContent>
				<NavTopMenu />
			</NavTopContent>
			<NavBottomContent>
				<NavBottomMenu />
			</NavBottomContent>
			<NotificationBarContent>
				@if (State.MakeItRecipes.Count > 0)
				{
					<div class="mx-2">
						<MudTooltip Text="Make It">
							<MudBadge Class="make-it-notification" Content="@(State.MakeItRecipes.Count)" Color="Color.Secondary" Overlap="true">
								<MudIconButton Icon="@Icons.Material.Filled.LocalDining" Color="Color.Primary" OnClick="@(() => HandleMakeItClicked())" />
							</MudBadge>
						</MudTooltip>
					</div>
				}
			</NotificationBarContent>
			<LogoContent>
				<LogoLayout Width="150px" Layout="LogoLayouts.NoText" />
			</LogoContent>
		</AppFrame>
	</Authorized>
	<NotAuthorized>
		<div class="app-default">
			@Body
		</div>
	</NotAuthorized>
</AuthorizeView>

<div id="blazor-error-ui">
	An unhandled error has occurred.
	<a href="" class="reload">Reload</a>
	<a class="dismiss">🗙</a>
</div>

@code {
	AppTheme CustomTheme = new();
	bool IsLoading = true; 

	protected async Task HandleInitializationCompleted()
	{
		await Mediator.GetClientConfiguration();
		await Mediator.GetActiveMember();

		var miRecipes = await LocalStorage.GetItemAsync<List<MakeItRecipeModel>>(Globals.LocalStorageKeys.MakeItRecipes);
		if (miRecipes != null)
			State.SetMakeItRecipes(miRecipes);

		State.OnMakeItRecipesChanged += HandleMakeItRecipesChanged;
		State.OnSaveMakeItRecipeChanges += HandleSaveMakeItRecipeChanges;

		IsLoading = false;
	}

	protected async Task HandleMakeItClicked()
	{
		await DialogService.OpenMakeItClicked(ScreenLockService);
	}

	protected async void HandleMakeItRecipesChanged()
	{
		await LocalStorage.SetItemAsync(Globals.LocalStorageKeys.MakeItRecipes, State.MakeItRecipes);
		StateHasChanged();
	}

	protected async void HandleSaveMakeItRecipeChanges()
	{
		await LocalStorage.SetItemAsync(Globals.LocalStorageKeys.MakeItRecipes, State.MakeItRecipes);
	}

	protected async Task HandleThemeSwitched(Themes theme)
	{
		var result = await Mediator.SetTheme(theme);
		if (!result.Success)
			Snackbar.Add(result.Message ?? Globals.UnexpectedError, Severity.Error);
	}
}
